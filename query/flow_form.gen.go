// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-flow-admin/model"
)

func newFlowFormModel(db *gorm.DB, opts ...gen.DOOption) flowFormModel {
	_flowFormModel := flowFormModel{}

	_flowFormModel.flowFormModelDo.UseDB(db, opts...)
	_flowFormModel.flowFormModelDo.UseModel(&model.FlowFormModel{})

	tableName := _flowFormModel.flowFormModelDo.TableName()
	_flowFormModel.ALL = field.NewAsterisk(tableName)
	_flowFormModel.ID = field.NewInt(tableName, "id")
	_flowFormModel.Key = field.NewString(tableName, "key")
	_flowFormModel.Version = field.NewInt(tableName, "version")
	_flowFormModel.Rule = field.NewString(tableName, "rule")
	_flowFormModel.Option = field.NewString(tableName, "option")
	_flowFormModel.CreateTime = field.NewTime(tableName, "create_time")

	_flowFormModel.fillFieldMap()

	return _flowFormModel
}

type flowFormModel struct {
	flowFormModelDo

	ALL        field.Asterisk
	ID         field.Int
	Key        field.String // key
	Version    field.Int    // 版本
	Rule       field.String // 表单回显使用
	Option     field.String // 表单回显使用
	CreateTime field.Time

	fieldMap map[string]field.Expr
}

func (f flowFormModel) Table(newTableName string) *flowFormModel {
	f.flowFormModelDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f flowFormModel) As(alias string) *flowFormModel {
	f.flowFormModelDo.DO = *(f.flowFormModelDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *flowFormModel) updateTableName(table string) *flowFormModel {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt(table, "id")
	f.Key = field.NewString(table, "key")
	f.Version = field.NewInt(table, "version")
	f.Rule = field.NewString(table, "rule")
	f.Option = field.NewString(table, "option")
	f.CreateTime = field.NewTime(table, "create_time")

	f.fillFieldMap()

	return f
}

func (f *flowFormModel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *flowFormModel) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 6)
	f.fieldMap["id"] = f.ID
	f.fieldMap["key"] = f.Key
	f.fieldMap["version"] = f.Version
	f.fieldMap["rule"] = f.Rule
	f.fieldMap["option"] = f.Option
	f.fieldMap["create_time"] = f.CreateTime
}

func (f flowFormModel) clone(db *gorm.DB) flowFormModel {
	f.flowFormModelDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f flowFormModel) replaceDB(db *gorm.DB) flowFormModel {
	f.flowFormModelDo.ReplaceDB(db)
	return f
}

type flowFormModelDo struct{ gen.DO }

type IFlowFormModelDo interface {
	gen.SubQuery
	Debug() IFlowFormModelDo
	WithContext(ctx context.Context) IFlowFormModelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFlowFormModelDo
	WriteDB() IFlowFormModelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFlowFormModelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFlowFormModelDo
	Not(conds ...gen.Condition) IFlowFormModelDo
	Or(conds ...gen.Condition) IFlowFormModelDo
	Select(conds ...field.Expr) IFlowFormModelDo
	Where(conds ...gen.Condition) IFlowFormModelDo
	Order(conds ...field.Expr) IFlowFormModelDo
	Distinct(cols ...field.Expr) IFlowFormModelDo
	Omit(cols ...field.Expr) IFlowFormModelDo
	Join(table schema.Tabler, on ...field.Expr) IFlowFormModelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFlowFormModelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFlowFormModelDo
	Group(cols ...field.Expr) IFlowFormModelDo
	Having(conds ...gen.Condition) IFlowFormModelDo
	Limit(limit int) IFlowFormModelDo
	Offset(offset int) IFlowFormModelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFlowFormModelDo
	Unscoped() IFlowFormModelDo
	Create(values ...*model.FlowFormModel) error
	CreateInBatches(values []*model.FlowFormModel, batchSize int) error
	Save(values ...*model.FlowFormModel) error
	First() (*model.FlowFormModel, error)
	Take() (*model.FlowFormModel, error)
	Last() (*model.FlowFormModel, error)
	Find() ([]*model.FlowFormModel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FlowFormModel, err error)
	FindInBatches(result *[]*model.FlowFormModel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FlowFormModel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFlowFormModelDo
	Assign(attrs ...field.AssignExpr) IFlowFormModelDo
	Joins(fields ...field.RelationField) IFlowFormModelDo
	Preload(fields ...field.RelationField) IFlowFormModelDo
	FirstOrInit() (*model.FlowFormModel, error)
	FirstOrCreate() (*model.FlowFormModel, error)
	FindByPage(offset int, limit int) (result []*model.FlowFormModel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFlowFormModelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f flowFormModelDo) Debug() IFlowFormModelDo {
	return f.withDO(f.DO.Debug())
}

func (f flowFormModelDo) WithContext(ctx context.Context) IFlowFormModelDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f flowFormModelDo) ReadDB() IFlowFormModelDo {
	return f.Clauses(dbresolver.Read)
}

func (f flowFormModelDo) WriteDB() IFlowFormModelDo {
	return f.Clauses(dbresolver.Write)
}

func (f flowFormModelDo) Session(config *gorm.Session) IFlowFormModelDo {
	return f.withDO(f.DO.Session(config))
}

func (f flowFormModelDo) Clauses(conds ...clause.Expression) IFlowFormModelDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f flowFormModelDo) Returning(value interface{}, columns ...string) IFlowFormModelDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f flowFormModelDo) Not(conds ...gen.Condition) IFlowFormModelDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f flowFormModelDo) Or(conds ...gen.Condition) IFlowFormModelDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f flowFormModelDo) Select(conds ...field.Expr) IFlowFormModelDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f flowFormModelDo) Where(conds ...gen.Condition) IFlowFormModelDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f flowFormModelDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IFlowFormModelDo {
	return f.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (f flowFormModelDo) Order(conds ...field.Expr) IFlowFormModelDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f flowFormModelDo) Distinct(cols ...field.Expr) IFlowFormModelDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f flowFormModelDo) Omit(cols ...field.Expr) IFlowFormModelDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f flowFormModelDo) Join(table schema.Tabler, on ...field.Expr) IFlowFormModelDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f flowFormModelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFlowFormModelDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f flowFormModelDo) RightJoin(table schema.Tabler, on ...field.Expr) IFlowFormModelDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f flowFormModelDo) Group(cols ...field.Expr) IFlowFormModelDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f flowFormModelDo) Having(conds ...gen.Condition) IFlowFormModelDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f flowFormModelDo) Limit(limit int) IFlowFormModelDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f flowFormModelDo) Offset(offset int) IFlowFormModelDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f flowFormModelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFlowFormModelDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f flowFormModelDo) Unscoped() IFlowFormModelDo {
	return f.withDO(f.DO.Unscoped())
}

func (f flowFormModelDo) Create(values ...*model.FlowFormModel) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f flowFormModelDo) CreateInBatches(values []*model.FlowFormModel, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f flowFormModelDo) Save(values ...*model.FlowFormModel) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f flowFormModelDo) First() (*model.FlowFormModel, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FlowFormModel), nil
	}
}

func (f flowFormModelDo) Take() (*model.FlowFormModel, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FlowFormModel), nil
	}
}

func (f flowFormModelDo) Last() (*model.FlowFormModel, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FlowFormModel), nil
	}
}

func (f flowFormModelDo) Find() ([]*model.FlowFormModel, error) {
	result, err := f.DO.Find()
	return result.([]*model.FlowFormModel), err
}

func (f flowFormModelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FlowFormModel, err error) {
	buf := make([]*model.FlowFormModel, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f flowFormModelDo) FindInBatches(result *[]*model.FlowFormModel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f flowFormModelDo) Attrs(attrs ...field.AssignExpr) IFlowFormModelDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f flowFormModelDo) Assign(attrs ...field.AssignExpr) IFlowFormModelDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f flowFormModelDo) Joins(fields ...field.RelationField) IFlowFormModelDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f flowFormModelDo) Preload(fields ...field.RelationField) IFlowFormModelDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f flowFormModelDo) FirstOrInit() (*model.FlowFormModel, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FlowFormModel), nil
	}
}

func (f flowFormModelDo) FirstOrCreate() (*model.FlowFormModel, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FlowFormModel), nil
	}
}

func (f flowFormModelDo) FindByPage(offset int, limit int) (result []*model.FlowFormModel, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f flowFormModelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f flowFormModelDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f flowFormModelDo) Delete(models ...*model.FlowFormModel) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *flowFormModelDo) withDO(do gen.Dao) *flowFormModelDo {
	f.DO = *do.(*gen.DO)
	return f
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"go-flow-admin/model"
)

func newFlowCateModel(db *gorm.DB, opts ...gen.DOOption) flowCateModel {
	_flowCateModel := flowCateModel{}

	_flowCateModel.flowCateModelDo.UseDB(db, opts...)
	_flowCateModel.flowCateModelDo.UseModel(&model.FlowCateModel{})

	tableName := _flowCateModel.flowCateModelDo.TableName()
	_flowCateModel.ALL = field.NewAsterisk(tableName)
	_flowCateModel.ID = field.NewInt(tableName, "id")
	_flowCateModel.Name = field.NewString(tableName, "name")
	_flowCateModel.CreateTime = field.NewTime(tableName, "create_time")
	_flowCateModel.UpdateTime = field.NewTime(tableName, "update_time")
	_flowCateModel.DeleteTime = field.NewField(tableName, "delete_time")

	_flowCateModel.fillFieldMap()

	return _flowCateModel
}

type flowCateModel struct {
	flowCateModelDo

	ALL        field.Asterisk
	ID         field.Int
	Name       field.String // 分类名
	CreateTime field.Time
	UpdateTime field.Time
	DeleteTime field.Field

	fieldMap map[string]field.Expr
}

func (f flowCateModel) Table(newTableName string) *flowCateModel {
	f.flowCateModelDo.UseTable(newTableName)
	return f.updateTableName(newTableName)
}

func (f flowCateModel) As(alias string) *flowCateModel {
	f.flowCateModelDo.DO = *(f.flowCateModelDo.As(alias).(*gen.DO))
	return f.updateTableName(alias)
}

func (f *flowCateModel) updateTableName(table string) *flowCateModel {
	f.ALL = field.NewAsterisk(table)
	f.ID = field.NewInt(table, "id")
	f.Name = field.NewString(table, "name")
	f.CreateTime = field.NewTime(table, "create_time")
	f.UpdateTime = field.NewTime(table, "update_time")
	f.DeleteTime = field.NewField(table, "delete_time")

	f.fillFieldMap()

	return f
}

func (f *flowCateModel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := f.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (f *flowCateModel) fillFieldMap() {
	f.fieldMap = make(map[string]field.Expr, 5)
	f.fieldMap["id"] = f.ID
	f.fieldMap["name"] = f.Name
	f.fieldMap["create_time"] = f.CreateTime
	f.fieldMap["update_time"] = f.UpdateTime
	f.fieldMap["delete_time"] = f.DeleteTime
}

func (f flowCateModel) clone(db *gorm.DB) flowCateModel {
	f.flowCateModelDo.ReplaceConnPool(db.Statement.ConnPool)
	return f
}

func (f flowCateModel) replaceDB(db *gorm.DB) flowCateModel {
	f.flowCateModelDo.ReplaceDB(db)
	return f
}

type flowCateModelDo struct{ gen.DO }

type IFlowCateModelDo interface {
	gen.SubQuery
	Debug() IFlowCateModelDo
	WithContext(ctx context.Context) IFlowCateModelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IFlowCateModelDo
	WriteDB() IFlowCateModelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IFlowCateModelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IFlowCateModelDo
	Not(conds ...gen.Condition) IFlowCateModelDo
	Or(conds ...gen.Condition) IFlowCateModelDo
	Select(conds ...field.Expr) IFlowCateModelDo
	Where(conds ...gen.Condition) IFlowCateModelDo
	Order(conds ...field.Expr) IFlowCateModelDo
	Distinct(cols ...field.Expr) IFlowCateModelDo
	Omit(cols ...field.Expr) IFlowCateModelDo
	Join(table schema.Tabler, on ...field.Expr) IFlowCateModelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IFlowCateModelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IFlowCateModelDo
	Group(cols ...field.Expr) IFlowCateModelDo
	Having(conds ...gen.Condition) IFlowCateModelDo
	Limit(limit int) IFlowCateModelDo
	Offset(offset int) IFlowCateModelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IFlowCateModelDo
	Unscoped() IFlowCateModelDo
	Create(values ...*model.FlowCateModel) error
	CreateInBatches(values []*model.FlowCateModel, batchSize int) error
	Save(values ...*model.FlowCateModel) error
	First() (*model.FlowCateModel, error)
	Take() (*model.FlowCateModel, error)
	Last() (*model.FlowCateModel, error)
	Find() ([]*model.FlowCateModel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FlowCateModel, err error)
	FindInBatches(result *[]*model.FlowCateModel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.FlowCateModel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IFlowCateModelDo
	Assign(attrs ...field.AssignExpr) IFlowCateModelDo
	Joins(fields ...field.RelationField) IFlowCateModelDo
	Preload(fields ...field.RelationField) IFlowCateModelDo
	FirstOrInit() (*model.FlowCateModel, error)
	FirstOrCreate() (*model.FlowCateModel, error)
	FindByPage(offset int, limit int) (result []*model.FlowCateModel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IFlowCateModelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (f flowCateModelDo) Debug() IFlowCateModelDo {
	return f.withDO(f.DO.Debug())
}

func (f flowCateModelDo) WithContext(ctx context.Context) IFlowCateModelDo {
	return f.withDO(f.DO.WithContext(ctx))
}

func (f flowCateModelDo) ReadDB() IFlowCateModelDo {
	return f.Clauses(dbresolver.Read)
}

func (f flowCateModelDo) WriteDB() IFlowCateModelDo {
	return f.Clauses(dbresolver.Write)
}

func (f flowCateModelDo) Session(config *gorm.Session) IFlowCateModelDo {
	return f.withDO(f.DO.Session(config))
}

func (f flowCateModelDo) Clauses(conds ...clause.Expression) IFlowCateModelDo {
	return f.withDO(f.DO.Clauses(conds...))
}

func (f flowCateModelDo) Returning(value interface{}, columns ...string) IFlowCateModelDo {
	return f.withDO(f.DO.Returning(value, columns...))
}

func (f flowCateModelDo) Not(conds ...gen.Condition) IFlowCateModelDo {
	return f.withDO(f.DO.Not(conds...))
}

func (f flowCateModelDo) Or(conds ...gen.Condition) IFlowCateModelDo {
	return f.withDO(f.DO.Or(conds...))
}

func (f flowCateModelDo) Select(conds ...field.Expr) IFlowCateModelDo {
	return f.withDO(f.DO.Select(conds...))
}

func (f flowCateModelDo) Where(conds ...gen.Condition) IFlowCateModelDo {
	return f.withDO(f.DO.Where(conds...))
}

func (f flowCateModelDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IFlowCateModelDo {
	return f.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (f flowCateModelDo) Order(conds ...field.Expr) IFlowCateModelDo {
	return f.withDO(f.DO.Order(conds...))
}

func (f flowCateModelDo) Distinct(cols ...field.Expr) IFlowCateModelDo {
	return f.withDO(f.DO.Distinct(cols...))
}

func (f flowCateModelDo) Omit(cols ...field.Expr) IFlowCateModelDo {
	return f.withDO(f.DO.Omit(cols...))
}

func (f flowCateModelDo) Join(table schema.Tabler, on ...field.Expr) IFlowCateModelDo {
	return f.withDO(f.DO.Join(table, on...))
}

func (f flowCateModelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IFlowCateModelDo {
	return f.withDO(f.DO.LeftJoin(table, on...))
}

func (f flowCateModelDo) RightJoin(table schema.Tabler, on ...field.Expr) IFlowCateModelDo {
	return f.withDO(f.DO.RightJoin(table, on...))
}

func (f flowCateModelDo) Group(cols ...field.Expr) IFlowCateModelDo {
	return f.withDO(f.DO.Group(cols...))
}

func (f flowCateModelDo) Having(conds ...gen.Condition) IFlowCateModelDo {
	return f.withDO(f.DO.Having(conds...))
}

func (f flowCateModelDo) Limit(limit int) IFlowCateModelDo {
	return f.withDO(f.DO.Limit(limit))
}

func (f flowCateModelDo) Offset(offset int) IFlowCateModelDo {
	return f.withDO(f.DO.Offset(offset))
}

func (f flowCateModelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IFlowCateModelDo {
	return f.withDO(f.DO.Scopes(funcs...))
}

func (f flowCateModelDo) Unscoped() IFlowCateModelDo {
	return f.withDO(f.DO.Unscoped())
}

func (f flowCateModelDo) Create(values ...*model.FlowCateModel) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Create(values)
}

func (f flowCateModelDo) CreateInBatches(values []*model.FlowCateModel, batchSize int) error {
	return f.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (f flowCateModelDo) Save(values ...*model.FlowCateModel) error {
	if len(values) == 0 {
		return nil
	}
	return f.DO.Save(values)
}

func (f flowCateModelDo) First() (*model.FlowCateModel, error) {
	if result, err := f.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.FlowCateModel), nil
	}
}

func (f flowCateModelDo) Take() (*model.FlowCateModel, error) {
	if result, err := f.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.FlowCateModel), nil
	}
}

func (f flowCateModelDo) Last() (*model.FlowCateModel, error) {
	if result, err := f.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.FlowCateModel), nil
	}
}

func (f flowCateModelDo) Find() ([]*model.FlowCateModel, error) {
	result, err := f.DO.Find()
	return result.([]*model.FlowCateModel), err
}

func (f flowCateModelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.FlowCateModel, err error) {
	buf := make([]*model.FlowCateModel, 0, batchSize)
	err = f.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (f flowCateModelDo) FindInBatches(result *[]*model.FlowCateModel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return f.DO.FindInBatches(result, batchSize, fc)
}

func (f flowCateModelDo) Attrs(attrs ...field.AssignExpr) IFlowCateModelDo {
	return f.withDO(f.DO.Attrs(attrs...))
}

func (f flowCateModelDo) Assign(attrs ...field.AssignExpr) IFlowCateModelDo {
	return f.withDO(f.DO.Assign(attrs...))
}

func (f flowCateModelDo) Joins(fields ...field.RelationField) IFlowCateModelDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Joins(_f))
	}
	return &f
}

func (f flowCateModelDo) Preload(fields ...field.RelationField) IFlowCateModelDo {
	for _, _f := range fields {
		f = *f.withDO(f.DO.Preload(_f))
	}
	return &f
}

func (f flowCateModelDo) FirstOrInit() (*model.FlowCateModel, error) {
	if result, err := f.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.FlowCateModel), nil
	}
}

func (f flowCateModelDo) FirstOrCreate() (*model.FlowCateModel, error) {
	if result, err := f.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.FlowCateModel), nil
	}
}

func (f flowCateModelDo) FindByPage(offset int, limit int) (result []*model.FlowCateModel, count int64, err error) {
	result, err = f.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = f.Offset(-1).Limit(-1).Count()
	return
}

func (f flowCateModelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = f.Count()
	if err != nil {
		return
	}

	err = f.Offset(offset).Limit(limit).Scan(result)
	return
}

func (f flowCateModelDo) Scan(result interface{}) (err error) {
	return f.DO.Scan(result)
}

func (f flowCateModelDo) Delete(models ...*model.FlowCateModel) (result gen.ResultInfo, err error) {
	return f.DO.Delete(models)
}

func (f *flowCateModelDo) withDO(do gen.Dao) *flowCateModelDo {
	f.DO = *do.(*gen.DO)
	return f
}
